// const tezoslib = require('tezos-api-js')
const { maybeCreateAccount, verifyAccount } = require('../rainbow/helpers')
const { RainbowConfig } = require('../config')
const { BN } = require('ethereumjs-util')
const { DeployToken } = require('../transfer-eth-erc20/deploy-token')

class InitTezosTokenFactory {
  static async execute() {
    const masterAccount = RainbowConfig.getParam('tezos-master-account')
    const masterSk = RainbowConfig.getParam('tezos-master-sk')
    const tokenFactoryAccount = RainbowConfig.getParam(
      'tezos-token-factory-account'
    )
    let tokenSk = RainbowConfig.maybeGetParam('tezos-token-factory-sk')
    if (!tokenSk) {
      console.log(
        'Secret key for fungible token is not specified. Reusing master secret key.'
      )
      tokenSk = masterSk
      RainbowConfig.setParam('tezos-token-factory-sk', tokenSk)
    }
    const tokenContractPath = RainbowConfig.getParam(
      'tezos-token-factory-contract-path'
    )
    const tokenInitBalance = RainbowConfig.getParam(
      'tezos-token-factory-init-balance'
    )
    const proverAccount = RainbowConfig.getParam('tezos-prover-account')

    const tezosNodeUrl = RainbowConfig.getParam('tezos-node-url')
    const tezosNetworkId = RainbowConfig.getParam('tezos-network-id')

    const tokenPk = tezoslib.KeyPair.fromString(tokenSk).getPublicKey()

    const keyStore = new tezoslib.keyStores.InMemoryKeyStore()
    await keyStore.setKey(
      tezosNetworkId,
      masterAccount,
      tezoslib.KeyPair.fromString(masterSk)
    )
    await keyStore.setKey(
      tezosNetworkId,
      tokenFactoryAccount,
      tezoslib.KeyPair.fromString(tokenSk)
    )
    const tezos = await tezoslib.connect({
      nodeUrl: tezosNodeUrl,
      networkId: tezosNetworkId,
      masterAccount: masterAccount,
      deps: { keyStore: keyStore },
    })

    await verifyAccount(tezos, masterAccount)
    console.log('Deploying token contract.')
    await maybeCreateAccount(
      tezos,
      masterAccount,
      tokenFactoryAccount,
      tokenPk,
      tokenInitBalance,
      tokenContractPath
    )
    const tokenFactoryContract = new tezoslib.Contract(
      new tezoslib.Account(tezos.connection, tokenFactoryAccount),
      tokenFactoryAccount,
      {
        changeMethods: ['new', 'deploy_bridge_token'],
        viewMethods: ['get_bridge_token_account_id'],
      }
    )
    const lockerAddress = RainbowConfig.getParam('eth-locker-address')
    try {
      // Try initializing the factory.
      await tokenFactoryContract.new(
        {
          prover_account: proverAccount,
          locker_address: lockerAddress.startsWith('0x')
            ? lockerAddress.substr(2)
            : lockerAddress,
        },
        new BN('300000000000000')
      )
    } catch (err) {
      console.log(`Failed to initialize the token factory ${err}`)
      process.exit(1)
    }

    DeployToken.execute('erc20', RainbowConfig.getParam('eth-erc20-address'))
  }
}

exports.InitTezosTokenFactory = InitTezosTokenFactory
