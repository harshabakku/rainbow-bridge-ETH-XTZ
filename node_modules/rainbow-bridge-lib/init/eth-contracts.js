const Web3 = require('web3')
const BN = require('bn.js')
const fs = require('fs')
const { BridgeConfig } = require('../config')
const { normalizeEthKey } = require('../rainbow/robust')
BridgeConfig.setParam('eth-node-url', 'ws://localhost:9545')



class EthContractInitializer {
  async execute(contractName, args, gas) {
    const address = 'eth-' + contractName + '-address'
    const abiPath = BridgeConfig.getParam('eth-' + contractName + '-abi-path')
    const binPath = BridgeConfig.getParam('eth-' + contractName + '-bin-path')
    if (!abiPath || !binPath) {
      return false
    }
    
    try {
      const web3 = new Web3(BridgeConfig.getParam('eth-node-url'))
      
      console.log("local eth-node-url: " + BridgeConfig.getParam('eth-node-url'));
      
      
      // below code is overriden by setting ethMasterAccount right here instead of getting from config file. 
      // let ethMasterAccount = web3.eth.accounts.privateKeyToAccount(
        // normalizeEthKey(BridgeConfig.getParam('eth-master-sk'))
        // )
        // web3.eth.accounts.wallet.add(ethMasterAccount)
        // web3.eth.defaultAccount = ethMasterAccount.address
        
        // ethMasterAccount = ethMasterAccount.address
        
      let accounts = await web3.eth.getAccounts();
      let ethMasterAccount = accounts[0];
      web3.eth.defaultAccount = accounts[0];
      console.log("eth master addresss "+ ethMasterAccount )
      console.log("web3 default account " + web3.eth.defaultAccount);
      
      console.log('Deploying ETH contract ', contractName)
      const tokenContract = new web3.eth.Contract(
        JSON.parse(fs.readFileSync(abiPath))
      )
      const txContract = await tokenContract
        .deploy({
          data: '0x' + fs.readFileSync(binPath),
          arguments: args,
        })
        .send({
          from: ethMasterAccount,
          gas: gas,
          gasPrice: new BN(await web3.eth.getGasPrice()).mul(
            new BN(BridgeConfig.getParam('eth-gas-multiplier'))
          ),
        })
      console.log(
        'Deployed ETH contract',
        contractName,
        'to',
        `${txContract.options.address}`
      )
      BridgeConfig.setParam(
        address,
        normalizeEthKey(txContract.options.address)
      )
      BridgeConfig.saveConfig()
      try {
        // Only WebSocket provider can close.
        web3.currentProvider.connection.close()
      } catch (e) {}
    } catch (e) {
      console.log(e)
      return false
    }
    return true
  }
}

class InitEthEd25519 {
  static async execute() {
    const ethContractInitializer = new EthContractInitializer()
    const contractName = 'ed25519'
    const success = await ethContractInitializer.execute(
      contractName,
      [],
      5000000
    )
    if (!success) {
      console.log("Can't deploy", contractName)
      throw 1
    }
  }
}

class InitEthErc20 {
  static async execute() {
    console.log("test log here..............");
    const ethContractInitializer = new EthContractInitializer()
    const contractName = 'erc20'
    const success = await ethContractInitializer.execute(
      contractName,
      [],
      3000000
    )
    if (!success) {
      console.log("Can't deploy", contractName)
      throw 1
    }
  }
}

class InitEthLocker {
  static async execute() {
    const ethContractInitializer = new EthContractInitializer()
    const contractName = 'locker'

    // for now set accounts[1] as prover address until we eth-prover contract on Tezos chain
    BridgeConfig.setParam('eth-prover-address','0x6006774CeB7946816a8A19F5111b3F415C47De5E' );
    console.log("eth prover address " + BridgeConfig.getParam('eth-prover-address'));
    
    const success = await ethContractInitializer.execute(
      contractName,
      [
        Buffer.from(
          BridgeConfig.getParam('tezos-token-factory-account'),
          'utf8'
        ),
        BridgeConfig.getParam('eth-prover-address'),
      ],
      5000000
    )
    if (!success) {
      console.log("Can't deploy", contractName)
      throw 1
    }
  }
}

class InitEthClient {
  static async execute() {
    const ethContractInitializer = new EthContractInitializer()
    const contractName = 'client'
    const web3 = new Web3(BridgeConfig.getParam('eth-node-url'))
    const lockEthAmount = web3.utils.toBN(
      BridgeConfig.getParam('eth-client-lock-eth-amount')
    )
    const lockDuration = web3.utils.toBN(
      BridgeConfig.getParam('eth-client-lock-duration')
    )
    const replaceDuration = web3.utils.toBN(
      BridgeConfig.getParam('eth-client-replace-duration')
    ).mul(new web3.utils.BN(1e9))
    try {
      // Only WebSocket provider can close.
      web3.currentProvider.connection.close()
    } catch (e) {}
    const success = await ethContractInitializer.execute(
      contractName,
      [
        BridgeConfig.getParam('eth-ed25519-address'),
        lockEthAmount,
        lockDuration,
        replaceDuration,
      ],
      5000000
    )
    if (!success) {
      console.log("Can't deploy", contractName)
      throw 1
    }
  }
}

class InitEthProver {
  static async execute() {
    const ethContractInitializer = new EthContractInitializer()
    const contractName = 'prover'
    const success = await ethContractInitializer.execute(
      contractName,
      [BridgeConfig.getParam('eth-client-address')],
      3000000
    )
    if (!success) {
      console.log("Can't deploy", contractName)
      throw 1
    }
  }
}

exports.InitEthEd25519 = InitEthEd25519
exports.InitEthErc20 = InitEthErc20
exports.InitEthLocker = InitEthLocker
exports.InitEthClient = InitEthClient
exports.InitEthProver = InitEthProver