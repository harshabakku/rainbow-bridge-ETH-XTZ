const Web3 = require('web3')
// const tezoslib = require('tezos-api-js')
const { maybeCreateAccount, verifyAccount } = require('../tezbridge/helpers')
const { EthOnTezosClientContract } = require('../eth-on-tezos-client')
const { EthOnTezosProverContract } = require('../eth-on-tezos-prover')
const { RobustWeb3 } = require('../tezbridge/robust')
const { BridgeConfig } = require('../config')

class InitTezosContracts {
  static async execute() {
    const masterAccount = BridgeConfig.getParam('tezos-master-account')
    const masterSk = BridgeConfig.getParam('tezos-master-sk')
    const clientAccount = BridgeConfig.getParam('tezos-client-account')
    let clientSk = BridgeConfig.maybeGetParam('tezos-client-sk')
    if (!clientSk) {
      console.log(
        'Key to call Tezos Client contract is not specified. Reusing master key.'
      )
      clientSk = masterSk
      BridgeConfig.setParam('tezos-client-sk', masterSk)
    }
    const clientContractPath = BridgeConfig.getParam(
      'tezos-client-contract-path'
    )
    const clientInitBalance = BridgeConfig.getParam('tezos-client-init-balance')

    const proverAccount = BridgeConfig.getParam('tezos-prover-account')
    let proverSk = BridgeConfig.maybeGetParam('tezos-prover-sk')
    if (!proverSk) {
      console.log(
        'Key to call Tezos Prover contract is not specified. Reusing master key.'
      )
      proverSk = masterSk
      BridgeConfig.setParam('tezos-prover-sk', masterSk)
    }
    const proverContractPath = BridgeConfig.getParam(
      'tezos-prover-contract-path'
    )
    const proverInitBalance = BridgeConfig.getParam('tezos-prover-init-balance')

    const tezosNodeUrl = BridgeConfig.getParam('tezos-node-url')
    const tezosNetworkId = BridgeConfig.getParam('tezos-network-id')
    const validateEthash = BridgeConfig.getParam('tezos-client-validate-ethash')
    const trustedSigner = BridgeConfig.getParam('tezos-client-trusted-signer')

    const clientPk = tezoslib.KeyPair.fromString(clientSk).getPublicKey()
    const proverPk = tezoslib.KeyPair.fromString(proverSk).getPublicKey()

    const keyStore = new tezoslib.keyStores.InMemoryKeyStore()
    await keyStore.setKey(
      tezosNetworkId,
      masterAccount,
      tezoslib.KeyPair.fromString(masterSk)
    )
    await keyStore.setKey(
      tezosNetworkId,
      clientAccount,
      tezoslib.KeyPair.fromString(clientSk)
    )
    await keyStore.setKey(
      tezosNetworkId,
      proverAccount,
      tezoslib.KeyPair.fromString(proverSk)
    )
    const tezos = await tezoslib.connect({
      nodeUrl: tezosNodeUrl,
      networkId: tezosNetworkId,
      masterAccount: masterAccount,
      deps: {
        keyStore: keyStore,
      },
    })

    console.log('Creating accounts and deploying the contracts.')
    await verifyAccount(tezos, masterAccount)
    await maybeCreateAccount(
      tezos,
      masterAccount,
      clientAccount,
      clientPk,
      clientInitBalance,
      clientContractPath
    )
    await verifyAccount(tezos, clientAccount)
    await maybeCreateAccount(
      tezos,
      masterAccount,
      proverAccount,
      proverPk,
      proverInitBalance,
      proverContractPath
    )
    await verifyAccount(tezos, proverAccount)

    console.log('Initializing client and prover contracts.')
    const clientContract = new EthOnTezosClientContract(
      new tezoslib.Account(tezos.connection, clientAccount),
      clientAccount
    )
    const robustWeb3 = new RobustWeb3(BridgeConfig.getParam('eth-node-url'))
    await clientContract.maybeInitialize(validateEthash === 'true', trustedSigner || null, robustWeb3)
    const proverContract = new EthOnTezosProverContract(
      new tezoslib.Account(tezos.connection, proverAccount),
      proverAccount
    )
    await proverContract.maybeInitialize(clientAccount)
    BridgeConfig.saveConfig()
    process.exit(0)
  }
}

exports.InitTezosContracts = InitTezosContracts
